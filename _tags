# OASIS_START
# DO NOT EDIT (digest: 2166ef0e085c9c2cf0fa81eb67216af0)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library netkat
"lib/netkat.cmxs": use_netkat
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(fieldslib)
<lib/*.ml{,i,y}>: package(fieldslib.syntax)
<lib/*.ml{,i,y}>: package(ocamlgraph)
<lib/*.ml{,i,y}>: package(openflow)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(sexplib.syntax)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(threads)
# Library syntax
"syntax/syntax.cmxs": use_syntax
<syntax/*.ml{,i,y}>: package(camlp4.extend)
<syntax/*.ml{,i,y}>: package(camlp4.lib)
<syntax/*.ml{,i,y}>: package(camlp4.quotations.o)
<syntax/*.ml{,i,y}>: package(ipaddr)
<syntax/*.ml{,i,y}>: package(ulex)
# Library async
"async/async.cmxs": use_async
<async/*.ml{,i,y}>: package(async)
<async/*.ml{,i,y}>: package(core)
<async/*.ml{,i,y}>: package(cstruct)
<async/*.ml{,i,y}>: package(cstruct.syntax)
<async/*.ml{,i,y}>: package(fieldslib)
<async/*.ml{,i,y}>: package(fieldslib.syntax)
<async/*.ml{,i,y}>: package(ocamlgraph)
<async/*.ml{,i,y}>: package(openflow)
<async/*.ml{,i,y}>: package(openflow.async)
<async/*.ml{,i,y}>: package(packet)
<async/*.ml{,i,y}>: package(sexplib)
<async/*.ml{,i,y}>: package(sexplib.syntax)
<async/*.ml{,i,y}>: package(str)
<async/*.ml{,i,y}>: package(threads)
<async/*.ml{,i,y}>: package(topology)
<async/*.ml{,i,y}>: use_netkat
# Library quickcheck
"quickcheck/quickcheck.cmxs": use_quickcheck
<quickcheck/*.ml{,i,y}>: package(core)
<quickcheck/*.ml{,i,y}>: package(fieldslib)
<quickcheck/*.ml{,i,y}>: package(fieldslib.syntax)
<quickcheck/*.ml{,i,y}>: package(ocamlgraph)
<quickcheck/*.ml{,i,y}>: package(openflow)
<quickcheck/*.ml{,i,y}>: package(openflow.quickcheck)
<quickcheck/*.ml{,i,y}>: package(packet.quickcheck)
<quickcheck/*.ml{,i,y}>: package(quickcheck)
<quickcheck/*.ml{,i,y}>: package(sexplib)
<quickcheck/*.ml{,i,y}>: package(sexplib.syntax)
<quickcheck/*.ml{,i,y}>: package(str)
<quickcheck/*.ml{,i,y}>: package(threads)
<quickcheck/*.ml{,i,y}>: use_netkat
# Executable testtool
"test/Test.byte": package(core)
"test/Test.byte": package(fieldslib)
"test/Test.byte": package(fieldslib.syntax)
"test/Test.byte": package(oUnit)
"test/Test.byte": package(ocamlgraph)
"test/Test.byte": package(openflow)
"test/Test.byte": package(openflow.quickcheck)
"test/Test.byte": package(pa_ounit)
"test/Test.byte": package(pa_ounit.syntax)
"test/Test.byte": package(packet)
"test/Test.byte": package(packet.quickcheck)
"test/Test.byte": package(quickcheck)
"test/Test.byte": package(sexplib)
"test/Test.byte": package(sexplib.syntax)
"test/Test.byte": package(str)
"test/Test.byte": package(threads)
"test/Test.byte": use_netkat
"test/Test.byte": use_quickcheck
<test/*.ml{,i,y}>: package(core)
<test/*.ml{,i,y}>: package(fieldslib)
<test/*.ml{,i,y}>: package(fieldslib.syntax)
<test/*.ml{,i,y}>: package(oUnit)
<test/*.ml{,i,y}>: package(ocamlgraph)
<test/*.ml{,i,y}>: package(openflow)
<test/*.ml{,i,y}>: package(openflow.quickcheck)
<test/*.ml{,i,y}>: package(pa_ounit)
<test/*.ml{,i,y}>: package(pa_ounit.syntax)
<test/*.ml{,i,y}>: package(packet)
<test/*.ml{,i,y}>: package(packet.quickcheck)
<test/*.ml{,i,y}>: package(quickcheck)
<test/*.ml{,i,y}>: package(sexplib)
<test/*.ml{,i,y}>: package(sexplib.syntax)
<test/*.ml{,i,y}>: package(str)
<test/*.ml{,i,y}>: package(threads)
<test/*.ml{,i,y}>: use_netkat
<test/*.ml{,i,y}>: use_quickcheck
# Executable katnetic
"frenetic/katnetic.native": package(async)
"frenetic/katnetic.native": package(cmdliner)
"frenetic/katnetic.native": package(core)
"frenetic/katnetic.native": package(cstruct)
"frenetic/katnetic.native": package(cstruct.syntax)
"frenetic/katnetic.native": package(fieldslib)
"frenetic/katnetic.native": package(fieldslib.syntax)
"frenetic/katnetic.native": package(ocamlgraph)
"frenetic/katnetic.native": package(openflow)
"frenetic/katnetic.native": package(openflow.async)
"frenetic/katnetic.native": package(packet)
"frenetic/katnetic.native": package(sexplib)
"frenetic/katnetic.native": package(sexplib.syntax)
"frenetic/katnetic.native": package(str)
"frenetic/katnetic.native": package(threads)
"frenetic/katnetic.native": package(topology)
"frenetic/katnetic.native": use_async
"frenetic/katnetic.native": use_netkat
<frenetic/*.ml{,i,y}>: package(cmdliner)
# Executable test_updates
"frenetic/test_updates.byte": package(async)
"frenetic/test_updates.byte": package(core)
"frenetic/test_updates.byte": package(cstruct)
"frenetic/test_updates.byte": package(cstruct.syntax)
"frenetic/test_updates.byte": package(fieldslib)
"frenetic/test_updates.byte": package(fieldslib.syntax)
"frenetic/test_updates.byte": package(ocamlgraph)
"frenetic/test_updates.byte": package(openflow)
"frenetic/test_updates.byte": package(openflow.async)
"frenetic/test_updates.byte": package(packet)
"frenetic/test_updates.byte": package(sexplib)
"frenetic/test_updates.byte": package(sexplib.syntax)
"frenetic/test_updates.byte": package(str)
"frenetic/test_updates.byte": package(threads)
"frenetic/test_updates.byte": package(topology)
"frenetic/test_updates.byte": use_async
"frenetic/test_updates.byte": use_netkat
<frenetic/*.ml{,i,y}>: package(async)
<frenetic/*.ml{,i,y}>: package(core)
<frenetic/*.ml{,i,y}>: package(cstruct)
<frenetic/*.ml{,i,y}>: package(cstruct.syntax)
<frenetic/*.ml{,i,y}>: package(fieldslib)
<frenetic/*.ml{,i,y}>: package(fieldslib.syntax)
<frenetic/*.ml{,i,y}>: package(ocamlgraph)
<frenetic/*.ml{,i,y}>: package(openflow)
<frenetic/*.ml{,i,y}>: package(openflow.async)
<frenetic/*.ml{,i,y}>: package(packet)
<frenetic/*.ml{,i,y}>: package(sexplib)
<frenetic/*.ml{,i,y}>: package(sexplib.syntax)
<frenetic/*.ml{,i,y}>: package(str)
<frenetic/*.ml{,i,y}>: package(threads)
<frenetic/*.ml{,i,y}>: package(topology)
<frenetic/*.ml{,i,y}>: use_async
<frenetic/*.ml{,i,y}>: use_netkat
# OASIS_STOP
<test/*.ml>: syntax_camlp4o
<lib/*.ml>: syntax_camlp4o
<async/*.ml>: syntax_camlp4o
<syntax/*.ml>: syntax_camlp4o
true: thread
